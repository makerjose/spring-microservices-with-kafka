# Spring Microservices with Kafka Communication

## Overview

This project demonstrates a microservices-based architecture using Spring Boot, Kafka, and Docker Compose. It includes four microservices—Product, Customer, Order, and Notification—designed for an e-commerce application. These services communicate with each other via Kafka to handle events such as product orders, customer notifications, and other actions across the application. The Kafka integration allows real-time event streaming between microservices, showcasing the asynchronous communication model.

## Folder Structure

The main project folder includes the following:
•	Product-microservice: Manages product-related operations.
•	Customer-microservice: Handles customer data and interactions.
•	Order-microservice: Processes customer orders.
•	Notification-microservice: Sends notifications based on order and customer actions.
•	Compose.yml: Docker Compose configuration for orchestrating the microservices, Kafka, and Zookeeper.
•	Readme.md: Project documentation.
•	.gitignore: Specifies files and directories to ignore in version control.

## Prerequisites

•	Docker and Docker Compose installed on your machine.
•	Java JDK 11 or above for local development (if not running directly via Docker).

## Getting Started

### Step 1: Clone the Repository

bash git clone https://github.com/your-username/your-repository.git cd your-repository


### Step 2: Build the Microservices

Each microservice is a standalone Spring Boot project. You can build them using Maven:

cd Product-microservice 
mvn clean install

cd ../Customer-microservice 
mvn clean install

cd ../Order-microservice 
mvn clean install

cd ../Notification-microservice 
mvn clean install



### Step 3: Run the Services with Docker Compose

From the main project directory, use Docker Compose to start all the services, including Kafka and Zookeeper.

docker-compose up -d

This will:
•	Launch Kafka and Zookeeper for handling message brokering.
•	Start each microservice on its designated port as specified in the Compose.yml file.


This will:
•	Launch Kafka and Zookeeper for handling message brokering.
•	Start each microservice on its designated port as specified in the Compose.yml file.

### Step 4: Verify the Services

•	Access each microservice to confirm they are running:
  o	Product Service: http://localhost:8081
  o	Customer Service: http://localhost:8082
  o	Order Service: http://localhost:8083
  o	Notification Service: http://localhost:8084
•	Kafka will be available at localhost:9092 for any internal connections between microservices.

### Testing Kafka Communication

Each microservice has Kafka producers and consumers set up for event communication. To test this:
1.	Send a message from one microservice to a Kafka topic.
2.	Observe how other microservices that subscribe to this topic react to the event (check logs for message consumption).

## Stopping the Services

To stop all running containers, run:

docker-compose down


## Additional Notes

•	Each microservice can be configured independently via its application.yml file, allowing custom Kafka topics, consumer groups, etc.
•	Kafka logs can be accessed from the Docker logs if you want to monitor message flow and debug issues.

## License

This project is licensed under the MIT License.

